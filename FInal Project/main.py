# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# importing necessary libraries and modules
from PyQt5 import QtCore, QtGui, QtWidgets
from evaluate import evaluate  # for evaluating score
import sqlite3

class Ui_MainWindow(object):

    # initializing variables
    def __init__(self):
        self.count_tot = 0
        self.count_bat = 0
        self.count_bow = 0
        self.count_ar = 0
        self.count_wk = 0
        self.point_available = 1000
        self.point_used = 0
        self.teams = set()
        self.all_teams = []
        self.players_selected_list = []

    # method for connecitng to database "cric_game.db"
    def con_db(self):
        cric_game = sqlite3.connect("cric_game.db")
        db_cursor = cric_game.cursor()
        return db_cursor

    # method for displaying batsman in listwidget when radiobuttonn bat is clicked
    def disp_bat(self):
        db_cursor = self.con_db()
        self.listWidget_all.clear()
        db_cursor.execute("SELECT PLAYER FROM STATS WHERE CTG ='BAT';")  # selecting batsman from database
        for i in db_cursor.fetchall():
            if i[0] not in self.players_selected_list:
                self.listWidget_all.addItem(i[0])  # adding to listwidget

    # method for displaying bowlers in listwidget when radiobuttonn bow is clicked
    def disp_bow(self):
        db_cursor = self.con_db()
        self.listWidget_all.clear()
        db_cursor.execute("SELECT PLAYER FROM STATS WHERE CTG ='BWL'")   # selecting bowlers from database
        for i in db_cursor.fetchall():
            if i[0] not in self.players_selected_list:
                self.listWidget_all.addItem(i[0])   # adding to listwidget

    # method for displaying all-rounders in listwidget when radiobuttonn ar is clicked
    def disp_ar(self):
        db_cursor = self.con_db()
        self.listWidget_all.clear()
        db_cursor.execute("SELECT PLAYER FROM STATS WHERE CTG ='AR';")   # selecting all-rounders from database
        for i in db_cursor.fetchall():
            if i[0] not in self.players_selected_list:
                self.listWidget_all.addItem(i[0])   # adding to listwidget

    # method for displaying wicket-keepers in listwidget when radiobuttonn wk is clicked
    def disp_wk(self):
        db_cursor = self.con_db()
        self.listWidget_all.clear()
        db_cursor.execute("SELECT PLAYER FROM STATS WHERE CTG ='WK';")   # selecting wicket-keepers from database
        for i in db_cursor.fetchall():
            if i[0] not in self.players_selected_list:
                self.listWidget_all.addItem(i[0])   # adding to listwidget

    # method for displaying message when and when required
    def msg_box(self, title, message):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(message)
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.setWindowIcon(QtGui.QIcon("Pics\\message.png"))
        if title == "Welcome" or title == "Congratulations":
            msg.setIcon(QtWidgets.QMessageBox.Information)
        elif title == "Deleted":
            msg.setIcon(QtWidgets.QMessageBox.Critical)
        else:
            msg.setIcon(QtWidgets.QMessageBox.Warning)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        msg.setFont(font)
        msg.exec_()

    # method for creating new team
    def new_team(self):
        self.msg_box('Welcome', 'Enter Team Name.\n(Choose 11 players wisely.')
        # clearing everything and setting everyting to 0
        self.listWidget_all.clear()
        self.listWidget_team.clear()
        self.players_selected_list = []
        self.count_bat = 0
        self.count_bow = 0
        self.count_ar = 0
        self.counr_wk = 0
        self.point_available = 1000
        self.point_used = 0

        # connecting radio-buttons
        self.rad_bat.clicked.connect(self.disp_bat)
        self.rad_bow.clicked.connect(self.disp_bow)
        self.rad_ar.clicked.connect(self.disp_ar)
        self.rad_wk.clicked.connect(self.disp_wk)

        self.lineEdit_team_name.clear()
        self.lineEdit_team_name.setPlaceholderText("Enter Team Name")
        self.lab_pts_available_count.setText("1000")
        self.lab_pts_used_count.setText("0")
        self.lab_bat_no.setText("0")
        self.lab_bow_no.setText("0")
        self.lab_ar_no.setText("0")
        self.lab_wk_no.setText("0")

    # method sor saving created team
    def save_team(self):
        cric_game = sqlite3.connect("cric_game.db")
        db_cursor = cric_game.cursor()
        db_cursor.execute("SELECT NAME FROM TEAMS;")
        self.team_lst = []
        if self.lineEdit_team_name.text() == "":  # error for missing team name
            self.msg_box("Error", "Please enter Team name")
        else:
            if self.listWidget_team.count() == 11: # checking for 11 players
                for i in db_cursor.fetchall():
                    self.team_lst.append(i[0])
                db_cursor.execute("SELECT PLAYER,CTG,VALUE FROM STATS")
                self.k=0
                if self.lineEdit_team_name.text() not in self.team_lst:
                    for i in db_cursor.fetchall():
                        if i[0] in self.players_selected_list:
                            db_cursor.execute("INSERT INTO TEAMS (PLAYER, NAME, VALUE) VALUES('{}','{}',{})".format(self.players_selected_list[self.k], self.lineEdit_team_name.text(), i[2]))
                            cric_game.commit()
                            self.k+=1
                    self.msg_box("Congratulations", "'{}' Team Saved Succesfully".format(self.lineEdit_team_name.text()))

                    # clearing everything after saving team
                    self.count_bat = 0
                    self.count_bow = 0
                    self.count_ar = 0
                    self.counr_wk = 0
                    self.lab_bat_no.setText("0")
                    self.lab_bow_no.setText("0")
                    self.lab_ar_no.setText("0")
                    self.lab_wk_no.setText("0")
                    self.point_available = 1000
                    self.point_used = 0
                    self.lab_pts_available_count.setText("1000")
                    self.lab_pts_used_count.setText("0")
                    self.lineEdit_team_name.clear()
                    self.lineEdit_team_name.setPlaceholderText("Enter Team Name")
                    self.listWidget_team.clear()
                    self.listWidget_all.clear()
                    self.players_selected_list = []
                else:   # error for duplication of team name
                    self.msg_box("Sorry", " '{}' Team Already Exists".format(self.lineEdit_team_name.text()))
            else:
                self.msg_box("Error", "There should be 11 players")

    # method for opening saved team
    def open_team(self):
        self.teams = set()
        self.players_selected_list = []
        db_cursor = self.con_db()
        db_cursor.execute("SELECT NAME FROM TEAMS;")
        for i in db_cursor.fetchall():
            self.teams.add(i[0])

        self.team, cond = QtWidgets.QInputDialog.getItem(MainWindow, "Open", "Choose a Team", self.teams, 0, False)
        if cond == True:
            self.lineEdit_team_name.setText(self.team)
            self.listWidget_all.clear()
            self.listWidget_team.clear()
            self.all_teams = []
            self.count_bat = 0
            self.count_bow = 0
            self.count_ar = 0
            self.counr_wk = 0
            self.lab_bat_no.setText("0")
            self.lab_bow_no.setText("0")
            self.lab_ar_no.setText("0")
            self.lab_wk_no.setText("0")
            self.point_available = 1000
            self.point_used = 0
            self.lab_pts_available_count.setText("1000")
            self.lab_pts_used_count.setText("0")
            self.rad_bat.clicked.connect(self.disp_bat)
            self.rad_bow.clicked.connect(self.disp_bow)
            self.rad_ar.clicked.connect(self.disp_ar)
            self.rad_wk.clicked.connect(self.disp_wk)
            db_cursor.execute('SELECT PLAYER,NAME,VALUE FROM TEAMS;')
            for i in db_cursor.fetchall():
                if i[1] == self.team:
                    self.point_used += i[2]
                    self.lab_pts_used_count.setText("{}".format(self.point_used))
                    self.lab_pts_available_count.setText("{}".format(self.point_available - self.point_used))
                    self.listWidget_team.addItem(i[0])
                    self.players_selected_list.append(i[0])
            db_cursor.execute('SELECT PLAYER,CTG FROM STATS;')
            for i in db_cursor.fetchall():
                # adding inputs in labels according to players of team
                if i[0] in self.players_selected_list:
                    if i[1] == "BAT":
                        self.count_bat += 1
                        self.lab_bat_no.setText("{}".format(self.count_bat))
                    elif i[1] == "BWL":
                        self.count_bow += 1
                        self.lab_bow_no.setText("{}".format(self.count_bow))
                    elif i[1] == "AR":
                        self.count_ar += 1
                        self.lab_ar_no.setText("{}".format(self.count_ar))
                    elif i[1] == "WK":
                        self.count_wk += 1
                        self.lab_wk_no.setText("{}".format(self.count_wk))
        else:
            pass

    # method for deleting saved team
    def del_team(self):
        self.teams = set()
        cric_game = sqlite3.connect("cric_game.db")
        db_cursor = cric_game.cursor()
        db_cursor.execute("SELECT NAME FROM TEAMS;")
        for i in db_cursor.fetchall():
            self.teams.add(i[0])
        self.team, cond = QtWidgets.QInputDialog.getItem(MainWindow, "Delete Team", "Choose Team to delete:", self.teams, 0, False)
        if cond:
            db_cursor.execute("SELECT NAME FROM TEAMS;")
            for i in db_cursor.fetchall():
                self.all_teams.append(i[0])
            if self.team in self.all_teams:
                db_cursor.execute("DELETE FROM TEAMS WHERE NAME ='{}'".format(self.team))
                cric_game.commit()
                self.msg_box("Deleted", "'{}' Team  Successfully  Deleted".format(self.team))
            elif self.team not in self.all_teams:
                self.msg_box("Warning", "'{}' does not exist.\nPlease enter valid team name")
        else:
            pass

    # method for quitting the window
    def quit(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("QUIT")
        text = "Are  you  sure  you  want  to  QUIT ."
        msg.setWindowIcon(QtGui.QIcon("Pics\\quit.png"))
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        msg.setText(text)
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        msg.setFont(font)
        ret = msg.exec_()
        if ret == QtWidgets.QMessageBox.Ok:   # exits if ok is clicked else nothing
            exit()

    # method for adding players to your team
    # from listwidget of all players to listwidget of selected players
    def add_to_team(self, item):
        db_cursor = self.con_db()
        db_cursor.execute("SELECT PLAYER,CTG,VALUE FROM STATS;")
        if self.listWidget_team.count() < 12:
            if self.listWidget_all.takeItem(self.listWidget_all.row(item)):
                if item.text() not in self.players_selected_list:
                    for i in db_cursor.fetchall():
                        if item.text() == i[0]:
                            if self.point_available >= i[2]:
                                # updating labels and lists accordingly
                                if i[1] == "BAT":
                                    self.count_bat += 1
                                    self.count_tot += 1
                                    self.lab_bat_no.setText("{}".format(self.count_bat))
                                    self.listWidget_team.addItem(item.text())
                                    self.players_selected_list.append(item.text())
                                elif i[1] == "BWL":
                                    self.count_bow += 1
                                    self.count_tot += 1
                                    self.lab_bow_no.setText("{}".format(self.count_bow))
                                    self.listWidget_team.addItem(item.text())
                                    self.players_selected_list.append(item.text())
                                elif i[1] == "AR":
                                    self.count_ar += 1
                                    self.count_tot += 1
                                    self.lab_ar_no.setText("{}".format(self.count_ar))
                                    self.listWidget_team.addItem(item.text())
                                    self.players_selected_list.append(item.text())
                                elif i[1] == "WK":
                                    print(self.count_wk)
                                    if self.count_wk < 1:
                                        self.count_wk += 1
                                        self.count_tot += 1
                                        self.lab_wk_no.setText("{}".format(self.count_wk))
                                        self.listWidget_team.addItem(item.text())
                                        self.players_selected_list.append(item.text())
                                    elif self.count_wk >= 1:   # error for more than 1 wicket keeper
                                        self.msg_box("Warning", "You can't select more than 1 wicket keeper")
                                        break

                                self.lab_total_selected_count.setText("{}".format(self.count_tot))
                                self.point_available -= i[2]
                                self.point_used += i[2]
                                self.lab_pts_available_count.setText("{}".format(self.point_available))
                                self.lab_pts_used_count.setText("{}".format(self.point_used))
                            elif self.point_available < i[2]:  # error for not enough points
                                self.msg_box("Warning", "You don't have enough Points")
            else:
                self.msg_box("Warning", "You can't select the same player again")
        else:
            self.msg_box("Warning", "You can't select more than 11 players")

    # method for removing players from team
    # from listwidget of selected players to listwidget of all players
    def remove_from_team(self, item):
        self.point_available = int(self.lab_pts_available_count.text())
        db_cursor = self.con_db()
        db_cursor.execute("SELECT PLAYER,CTG,VALUE FROM STATS;")
        self.listWidget_team.takeItem(self.listWidget_team.row(item))
        for i in db_cursor.fetchall():
            pts = i[2]
            if item.text() == i[0]:
                # updating labels and lists accordingly
                if i[1] == "BAT":
                    self.count_bat -= 1
                    self.count_tot -= 1
                    self.lab_bat_no.setText("{}".format(self.count_bat))
                    self.listWidget_all.addItem(item.text())
                    self.players_selected_list.remove(item.text())
                elif i[1] == "BWL":
                    self.count_bow -= 1
                    self.count_tot -= 1
                    self.lab_bow_no.setText("{}".format(self.count_bow))
                    self.listWidget_all.addItem(item.text())
                    self.players_selected_list.remove(item.text())
                elif i[1] == "AR":
                    self.count_ar -= 1
                    self.count_tot -= 1
                    self.lab_ar_no.setText("{}".format(self.count_ar))
                    self.listWidget_all.addItem(item.text())
                    self.players_selected_list.remove(item.text())
                elif i[1] == "WK":
                    self.count_wk -= 1
                    self.count_tot -= 1
                    self.lab_wk_no.setText("{}".format(self.count_wk))
                    self.listWidget_all.addItem(item.text())
                    self.players_selected_list.remove(item.text())

                self.point_available += pts
                self.point_used -= pts
                self.lab_pts_available_count.setText("{}".format(self.point_available))
                self.lab_pts_used_count.setText(("{}".format(self.point_used)))
                self.lab_total_selected_count.setText("{}".format(self.count_tot))

    # method for opening the evaluate_score window
    def open_evaluate(self):
        self.window = QtWidgets.QWidget()
        self.ui = evaluate.Ui_Form()
        self.ui.setupUi(self.window)
        self.window.show()

    # method to display instructions
    def ins(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Fantasy Cricket")
        text = '''\t\t~~~  Instructions  ~~~  
1.  Go  to  " Manage  Teams "  ---
\t>>  Tap  on  " NEW  Team "  to  create  team .
\t>>  Tap  on  " SAVE  Team "  to  save  your  team .
\t>>  Tap  on  " OPEN  Team "  to  open  saved  team .
\t>>  Tap  on  "DELETE  Team "  to  delete  saved  team .
\t>>  Tap  on  " EVALUATE Team "  to  evaluate  points .
\t>>  Tap  on  " QUIT " to  quit .
\n2.  Once  you  tap  on  NEW  team Enter  a team  name  and  click  on  either  category  of  players. The  list  gets populated  by  player  names , Select  your  desired  players  upto  a  maximum  of  1000  points.
'''
        msg.setText(text)
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.setWindowIcon(QtGui.QIcon("Pics\\instructions.png"))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        msg.setFont(font)
        msg.exec_()

    # method to display about
    def about(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Welcome")
        text = "Welcome  to  Fantasy  Cricket  created  by  Het  Patel\n\n\t\tEnjoy ! ! !"
        msg.setText(text)
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.setWindowIcon(QtGui.QIcon("Pics\\about.png"))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        msg.setFont(font)
        msg.exec_()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(719, 702)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(129, 255, 203);")
        MainWindow.setWindowIcon(QtGui.QIcon("Pics\\cric.png"))

        # creating a messagebox which appears befoe opening the main window
        welc = QtWidgets.QMessageBox()
        welc.setWindowTitle("Fantasy Cricket")
        welc_text = 'Welcome  to  Fantasy  Cricket ! ! !'
        welc_info_text = 'Please  Tap  on  Instructions  in  " Help "\nFirst  Click  " Open "  to  continue .'
        welc.setWindowIcon(QtGui.QIcon("Pics\\cric.png"))
        welc.setText(welc_text)
        welc.setDetailedText(welc_info_text)
        welc.setStandardButtons(QtWidgets.QMessageBox.Open | QtWidgets.QMessageBox.Close)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        welc.setFont(font)
        ret = welc.exec_()
        if ret == QtWidgets.QMessageBox.Close: # closes if "Close" is clicked
            exit()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.lab_selection = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lab_selection.setFont(font)
        self.lab_selection.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_selection.setObjectName("lab_selection")
        self.verticalLayout_5.addWidget(self.lab_selection)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.lab_bat = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_bat.setFont(font)
        self.lab_bat.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_bat.setObjectName("lab_bat")
        self.verticalLayout.addWidget(self.lab_bat)
        self.lab_bat_no = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_bat_no.setFont(font)
        self.lab_bat_no.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_bat_no.setObjectName("lab_bat_no")
        self.verticalLayout.addWidget(self.lab_bat_no)
        self.horizontalLayout_4.addLayout(self.verticalLayout)
        self.horizontalLayout.addLayout(self.horizontalLayout_4)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout.addWidget(self.line_2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lab_bow = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_bow.setFont(font)
        self.lab_bow.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_bow.setObjectName("lab_bow")
        self.verticalLayout_2.addWidget(self.lab_bow)
        self.lab_bow_no = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_bow_no.setFont(font)
        self.lab_bow_no.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_bow_no.setObjectName("lab_bow_no")
        self.verticalLayout_2.addWidget(self.lab_bow_no)
        self.horizontalLayout_5.addLayout(self.verticalLayout_2)
        self.horizontalLayout.addLayout(self.horizontalLayout_5)
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout.addWidget(self.line_3)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.lab_ar = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_ar.setFont(font)
        self.lab_ar.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_ar.setObjectName("lab_ar")
        self.verticalLayout_3.addWidget(self.lab_ar)
        self.lab_ar_no = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_ar_no.setFont(font)
        self.lab_ar_no.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_ar_no.setObjectName("lab_ar_no")
        self.verticalLayout_3.addWidget(self.lab_ar_no)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)
        self.horizontalLayout.addLayout(self.horizontalLayout_6)
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout.addWidget(self.line_4)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.lab_wk = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_wk.setFont(font)
        self.lab_wk.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_wk.setObjectName("lab_wk")
        self.verticalLayout_4.addWidget(self.lab_wk)
        self.lab_wk_no = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_wk_no.setFont(font)
        self.lab_wk_no.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_wk_no.setObjectName("lab_wk_no")
        self.verticalLayout_4.addWidget(self.lab_wk_no)
        self.horizontalLayout_7.addLayout(self.verticalLayout_4)
        self.horizontalLayout.addLayout(self.horizontalLayout_7)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.verticalLayout_5.addWidget(self.line)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.lab_pts_availabe = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lab_pts_availabe.setFont(font)
        self.lab_pts_availabe.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_pts_availabe.setObjectName("lab_pts_availabe")
        self.verticalLayout_7.addWidget(self.lab_pts_availabe)
        self.lab_pts_available_count = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lab_pts_available_count.setFont(font)
        self.lab_pts_available_count.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_pts_available_count.setObjectName("lab_pts_available_count")
        self.verticalLayout_7.addWidget(self.lab_pts_available_count)
        self.horizontalLayout_15.addLayout(self.verticalLayout_7)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_15.addItem(spacerItem)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.lab_total_selected = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lab_total_selected.setFont(font)
        self.lab_total_selected.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_total_selected.setObjectName("lab_total_selected")
        self.verticalLayout_6.addWidget(self.lab_total_selected)
        self.lab_total_selected_count = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lab_total_selected_count.setFont(font)
        self.lab_total_selected_count.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_total_selected_count.setObjectName("lab_total_selected_count")
        self.verticalLayout_6.addWidget(self.lab_total_selected_count)
        self.horizontalLayout_15.addLayout(self.verticalLayout_6)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_15.addItem(spacerItem1)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.lab_pts_used = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lab_pts_used.setFont(font)
        self.lab_pts_used.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_pts_used.setObjectName("lab_pts_used")
        self.verticalLayout_8.addWidget(self.lab_pts_used)
        self.lab_pts_used_count = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lab_pts_used_count.setFont(font)
        self.lab_pts_used_count.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_pts_used_count.setObjectName("lab_pts_used_count")
        self.verticalLayout_8.addWidget(self.lab_pts_used_count)
        self.horizontalLayout_15.addLayout(self.verticalLayout_8)
        self.verticalLayout_5.addLayout(self.horizontalLayout_15)
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout_5.addWidget(self.line_5)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.rad_bat = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rad_bat.setFont(font)
        self.rad_bat.setObjectName("rad_bat")
        self.horizontalLayout_3.addWidget(self.rad_bat)
        self.rad_bow = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rad_bow.setFont(font)
        self.rad_bow.setObjectName("rad_bow")
        self.horizontalLayout_3.addWidget(self.rad_bow)
        self.rad_ar = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rad_ar.setFont(font)
        self.rad_ar.setObjectName("rad_ar")
        self.horizontalLayout_3.addWidget(self.rad_ar)
        self.rad_wk = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rad_wk.setFont(font)
        self.rad_wk.setObjectName("rad_wk")
        self.horizontalLayout_3.addWidget(self.rad_wk)
        self.horizontalLayout_2.addLayout(self.horizontalLayout_3)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.lab_team_name = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lab_team_name.setFont(font)
        self.lab_team_name.setObjectName("lab_team_name")
        self.horizontalLayout_8.addWidget(self.lab_team_name)
        self.lineEdit_team_name = QtWidgets.QLineEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_team_name.setFont(font)
        self.lineEdit_team_name.setObjectName("lineEdit_team_name")
        self.horizontalLayout_8.addWidget(self.lineEdit_team_name)
        self.horizontalLayout_2.addLayout(self.horizontalLayout_8)
        self.verticalLayout_5.addLayout(self.horizontalLayout_2)
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.verticalLayout_5.addWidget(self.line_6)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.listWidget_all = QtWidgets.QListWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget_all.setFont(font)
        self.listWidget_all.setObjectName("listWidget_all")
        self.horizontalLayout_9.addWidget(self.listWidget_all)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem3)
        self.listWidget_team = QtWidgets.QListWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget_team.setFont(font)
        self.listWidget_team.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.listWidget_team.setObjectName("listWidget_team")
        self.horizontalLayout_9.addWidget(self.listWidget_team)
        self.verticalLayout_5.addLayout(self.horizontalLayout_9)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 719, 26))
        self.menubar.setObjectName("menubar")
        self.menuMANAGE_TEAMS = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.menuMANAGE_TEAMS.setFont(font)
        self.menuMANAGE_TEAMS.setObjectName("menuMANAGE_TEAMS")
        self.menuHELP = QtWidgets.QMenu(self.menubar)
        self.menuHELP.setObjectName("menuHELP")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.actionDELETE_Team = QtWidgets.QAction(MainWindow)
        self.actionDELETE_Team.setObjectName("actionDELETE_Team")
        self.actionQUIT = QtWidgets.QAction(MainWindow)
        self.actionQUIT.setObjectName("actionQUIT")
        self.actionInstructions = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.actionInstructions.setFont(font)
        self.actionInstructions.setObjectName("actionInstructions")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.actionAbout.setFont(font)
        self.actionAbout.setObjectName("actionAbout")
        self.menuMANAGE_TEAMS.addAction(self.actionNEW_Team)
        self.menuMANAGE_TEAMS.addAction(self.actionSAVE_Team)
        self.menuMANAGE_TEAMS.addAction(self.actionOPEN_Team)
        self.menuMANAGE_TEAMS.addAction(self.actionDELETE_Team)
        self.menuMANAGE_TEAMS.addSeparator()
        self.menuMANAGE_TEAMS.addAction(self.actionEVALUATE_Team)
        self.menuMANAGE_TEAMS.addSeparator()
        self.menuMANAGE_TEAMS.addAction(self.actionQUIT)
        self.menuHELP.addAction(self.actionInstructions)
        self.menuHELP.addAction(self.actionAbout)
        self.menubar.addAction(self.menuMANAGE_TEAMS.menuAction())
        self.menubar.addAction(self.menuHELP.menuAction())

        # connecting listwidgets
        self.listWidget_all.itemDoubleClicked.connect(self.add_to_team)
        self.listWidget_team.itemDoubleClicked.connect(self.remove_from_team)

        # adding icons
        self.actionNEW_Team.setIcon(QtGui.QIcon("Pics\\new_team.png"))
        self.actionSAVE_Team.setIcon(QtGui.QIcon("Pics\\save_team.png"))
        self.actionOPEN_Team.setIcon(QtGui.QIcon("Pics\\open_team.png"))
        self.actionDELETE_Team.setIcon(QtGui.QIcon("Pics\\delete_team.png"))
        self.actionEVALUATE_Team.setIcon(QtGui.QIcon("Pics\\evaluate_team.png"))
        self.actionQUIT.setIcon(QtGui.QIcon("Pics\\quit.png"))
        self.actionInstructions.setIcon(QtGui.QIcon("Pics\\instructions.png"))
        self.actionAbout.setIcon(QtGui.QIcon("Pics\\about.png"))

        # connecting all action buttons
        self.actionNEW_Team.triggered.connect(self.new_team)
        self.actionSAVE_Team.triggered.connect(self.save_team)
        self.actionOPEN_Team.triggered.connect(self.open_team)
        self.actionDELETE_Team.triggered.connect(self.del_team)
        self.actionEVALUATE_Team.triggered.connect(self.open_evaluate)
        self.actionQUIT.triggered.connect(self.quit)
        self.actionInstructions.triggered.connect(self.ins)
        self.actionAbout.triggered.connect(self.about)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket Game"))
        self.lab_selection.setText(_translate("MainWindow", "YOUR SELECTION"))
        self.lab_bat.setText(_translate("MainWindow", "BATSMAN (BAT)"))
        self.lab_bat_no.setText(_translate("MainWindow", "0"))
        self.lab_bow.setText(_translate("MainWindow", "BOWLER (BOW)"))
        self.lab_bow_no.setText(_translate("MainWindow", "0"))
        self.lab_ar.setText(_translate("MainWindow", "ALL-ROUNDER (AR)"))
        self.lab_ar_no.setText(_translate("MainWindow", "0"))
        self.lab_wk.setText(_translate("MainWindow", "WICKET KEEPER (WK)"))
        self.lab_wk_no.setText(_translate("MainWindow", "0"))
        self.lab_pts_availabe.setText(_translate("MainWindow", "Points Available :"))
        self.lab_pts_available_count.setText(_translate("MainWindow", "1000"))
        self.lab_total_selected.setText(_translate("MainWindow", "Total players selected :"))
        self.lab_total_selected_count.setText(_translate("MainWindow", "0"))
        self.lab_pts_used.setText(_translate("MainWindow", "Points Used :"))
        self.lab_pts_used_count.setText(_translate("MainWindow", "0"))
        self.rad_bat.setText(_translate("MainWindow", "BAT"))
        self.rad_bow.setText(_translate("MainWindow", "BOW"))
        self.rad_ar.setText(_translate("MainWindow", "AR"))
        self.rad_wk.setText(_translate("MainWindow", "WK"))
        self.lab_team_name.setText(_translate("MainWindow", "Team Name"))
        self.menuMANAGE_TEAMS.setTitle(_translate("MainWindow", "MANAGE TEAMS"))
        self.menuHELP.setTitle(_translate("MainWindow", "HELP"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionDELETE_Team.setText(_translate("MainWindow", "DELETE Team"))
        self.actionQUIT.setText(_translate("MainWindow", "QUIT"))
        self.actionInstructions.setText(_translate("MainWindow", "Instructions"))
        self.actionAbout.setText(_translate("MainWindow", "About"))

        # adding shortcuts to actions
        self.actionNEW_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSAVE_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionOPEN_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionEVALUATE_Team.setShortcut(_translate("MainWindow", "Ctrl+Return"))
        self.actionDELETE_Team.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionQUIT.setShortcut(_translate("MainWindow", "Esc"))
        self.actionInstructions.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionAbout.setShortcut(_translate("MainWindow", "Ctrl+A"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
